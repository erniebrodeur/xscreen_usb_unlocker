#!/usr/bin/ruby
require 'xscreen_usb_unlocker'
include XscreenUsbUnlocker
Options.banner = "Usage: Used to lock/unlock xscreensaver based on usb device id and serial."
Options.on("-s", "--serial SERIAL", "make sure the device matches this serial.") { |s| Options[:serial] = s}
Options.on("-d", "--device DEVICE", "make sure it is this specific device.") { |d| Options[:device] = d}
Options.on("-D", "--daemonize", "Daemonize this process in the background.") { |d| Options[:daemonize] = true}
Options.on("--save-config", "Save the device and serial to a config file and exit.") { |d| Options[:save_config] = true}
Options.parse!

if !Options[:device] && !Options[:serial]
  puts 'Must supply a device or serial to look for.'
  exit
end

def lock_screen
  Log.info 'locking'
  p = spawn "xscreensaver -no-splash"
  Process.detach p
  %x[xscreensaver-command -lock]
end

def unlock_screen
  Log.info 'unlocking'

  if xscreensaver_pids
    xscreensaver_pids.each do |p|
      Log.info "Appears to be pid: #{p.pid}"
      Process.kill "QUIT", p.pid
    end
  end
end

def xscreensaver_running?
  xscreensaver_pids.any?
end

def xscreensaver_pids
  Sys::ProcTable.ps.select{|x| x.cmdline.include?("xscreensaver") && !x.cmdline.include?("ruby")}
end

def plugged_in?
  usb = LIBUSB::Context.new
  options_hash = {}

  if Options[:device]
    v, p = Options[:device].split(":")
    options_hash[:idVendor] = v.hex if v && !v.empty?
    options_hash[:idProduct] = p.hex if p && !p.empty?
  end

  devices = usb.devices(options_hash)
  return true if devices.select { |d| d.serial_number == Options[:serial]}.any?
  false
end

def toggle_lock
  if plugged_in?
    Log.info 'unlock requested'
    unlock_screen
  else
    Log.info 'lock request'
    lock_screen
  end
end

if __FILE__ == $0
  # did we pry?
  Options.on_pry

  # should we save our config and bail?
  if Options[:save_config]
    Config["serial"] = Options[:serial] if Options[:serial]
    Config["device"] = Options[:device] if Options[:device]
    Config.save!
    puts "Saved configuration to #{Config.file}"
    exit
  end

  # kill a running copy of xscreensaver
  if xscreensaver_running?
    Log.info "xscreensaver appears to be running, killing so we can trap it."
    %x[killall -QUIT xscreensaver]
  end

  # grab our notifications
  Notifier = INotify::Notifier.new
  Dir.glob("/dev/bus/usb/*").each do |d|
    Notifier.watch(d, :delete, :create) do
      toggle_lock
    end
  end

  # fire off the lock cycle once.
  toggle_lock

  # start the notifier, which will fire off callbacks as needed.
  if Options[:daemonize] || File.file?(Config.file)
    Log.debug "Opening logfile."
    Log.filename "/home/ebrodeur/.logs/xscreensaver_unlocker.log"
    Log.debug "Daemonizing."
    App.daemonize(:mulitple_pids => false) { Notifier.run }
  else
    Notifier.run
  end
end
